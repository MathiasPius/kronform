apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
    name: openobserve-collector-agent
    namespace: openobserve
spec:
    config:
        exporters:
            otlphttp/openobserve:
                endpoint: http://openobserve-openobserve-standalone.openobserve.svc.local.kronform.pius.dev:5080/api/default/
                headers:
                    Authorization: ENC[AES256_GCM,data:BCzJjIXrYFNYjsO7uCL3PdIEgHtQ3nMIgDuB3viUxkXCb/ZQFwgIKNM8ul9E9tn4qqzauUG19yeXUw==,iv:x7J9kzAoMwhs/QbdMiU2Taw0kvUNXjza6RHzYVmFt8s=,tag:HaxSHKV7lLCGJZzC4kuN9A==,type:str]
            otlphttp/openobserve_k8s_events:
                endpoint: http://openobserve-openobserve-standalone.openobserve.svc.local.kronform.pius.dev:5080/api/default/
                headers:
                    Authorization: ENC[AES256_GCM,data:259rUnDY1GrcUdJLz9G2C+YuD/ezQwJvk+8Jo1bengMMPvS1OA+AH7ufEy/AjzaGV4eRHgnjyU8F9A==,iv:UhWjBA+jOj3oRzfix3/OcmCl27Y5Kj6uc5dhwgKdNPo=,tag:+nZv4sPbrPMObsU/01m68A==,type:str]
                    stream-name: k8s_events
        extensions:
            zpages: {}
        processors:
            batch:
                send_batch_size: 10000
                timeout: 10s
            k8sattributes:
                auth_type: serviceAccount
                extract:
                    labels:
                        - from: pod
                          key: app.kubernetes.io/name
                          tag_name: service.name
                        - from: pod
                          key: k8s-app
                          tag_name: service.name
                        - from: pod
                          key: app.kubernetes.io/instance
                          tag_name: k8s.app.instance
                        - from: pod
                          key: app.kubernetes.io/version
                          tag_name: service.version
                        - from: pod
                          key: app.kubernetes.io/component
                          tag_name: k8s.app.component
                    metadata:
                        - k8s.pod.name
                        - k8s.pod.uid
                        - k8s.deployment.name
                        - k8s.namespace.name
                        - k8s.node.name
                        - k8s.pod.start_time
                filter:
                    node_from_env_var: K8S_NODE_NAME
                passthrough: false
                pod_association:
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.uid
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.name
                        - from: resource_attribute
                          name: k8s.namespace.name
                        - from: resource_attribute
                          name: k8s.node.name
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.ip
                    - sources:
                        - from: resource_attribute
                          name: k8s.pod.name
                        - from: resource_attribute
                          name: k8s.namespace.name
                    - sources:
                        - from: connection
            resourcedetection:
                detectors:
                    - system
                    - env
                    - k8snode
                override: true
                system:
                    hostname_sources:
                        - os
                        - dns
        receivers:
            filelog/std:
                exclude:
                    - /var/log/pods/*/otel-collector/*.log
                    - /var/log/pods/*/otc-container/*.log
                include:
                    - /var/log/pods/*/*/*.log
                include_file_name: false
                include_file_path: true
                operators:
                    - id: get-format
                      routes:
                        - expr: body matches "^\\{"
                          output: parser-docker
                        - expr: body matches "^[^ Z]+ "
                          output: parser-crio
                        - expr: body matches "^[^ Z]+Z"
                          output: parser-containerd
                      type: router
                    - id: parser-crio
                      output: extract_metadata_from_filepath
                      regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
                      timestamp:
                        layout: 2006-01-02T15:04:05.999999999Z07:00
                        layout_type: gotime
                        parse_from: attributes.time
                      type: regex_parser
                    - id: parser-containerd
                      output: extract_metadata_from_filepath
                      regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
                      timestamp:
                        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
                        parse_from: attributes.time
                      type: regex_parser
                    - id: parser-docker
                      output: extract_metadata_from_filepath
                      timestamp:
                        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
                        parse_from: attributes.time
                      type: json_parser
                    - cache:
                        size: 128
                      id: extract_metadata_from_filepath
                      parse_from: attributes["log.file.path"]
                      regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
                      type: regex_parser
                    - from: attributes.log
                      to: body
                      type: move
                    - from: attributes.stream
                      to: attributes["log.iostream"]
                      type: move
                    - from: attributes.container_name
                      to: resource["k8s.container.name"]
                      type: move
                    - from: attributes.namespace
                      to: resource["k8s.namespace.name"]
                      type: move
                    - from: attributes.pod_name
                      to: resource["k8s.pod.name"]
                      type: move
                    - from: attributes.restart_count
                      to: resource["k8s.container.restart_count"]
                      type: move
                    - from: attributes.uid
                      to: resource["k8s.pod.uid"]
                      type: move
                start_at: end
            hostmetrics:
                collection_interval: 15s
                root_path: /hostfs
                scrapers:
                    cpu: {}
                    disk: {}
                    filesystem:
                        exclude_fs_types:
                            fs_types:
                                - autofs
                                - binfmt_misc
                                - bpf
                                - cgroup2
                                - configfs
                                - debugfs
                                - devpts
                                - devtmpfs
                                - fusectl
                                - hugetlbfs
                                - iso9660
                                - mqueue
                                - nsfs
                                - overlay
                                - proc
                                - procfs
                                - pstore
                                - rpc_pipefs
                                - securityfs
                                - selinuxfs
                                - squashfs
                                - sysfs
                                - tracefs
                            match_type: strict
                        exclude_mount_points:
                            match_type: regexp
                            mount_points:
                                - /dev/.*
                                - /proc/.*
                                - /sys/.*
                                - /run/k3s/containerd/.*
                                - /var/lib/docker/.*
                                - /var/lib/kubelet/.*
                                - /snap/.*
                    load: {}
                    network: {}
                    process: {}
            kubeletstats:
                auth_type: serviceAccount
                collection_interval: 15s
                endpoint: https://${env:K8S_NODE_NAME}:10250
                extra_metadata_labels:
                    - container.id
                    - k8s.volume.type
                insecure_skip_verify: true
                metric_groups:
                    - node
                    - pod
                    - container
                    - volume
                metrics:
                    k8s.pod.cpu_limit_utilization:
                        enabled: true
                    k8s.pod.cpu_request_utilization:
                        enabled: true
                    k8s.pod.memory_limit_utilization:
                        enabled: true
                    k8s.pod.memory_request_utilization:
                        enabled: true
            otlp:
                protocols:
                    grpc: {}
                    http: {}
            prometheus:
                config:
                    scrape_configs:
                        - job_name: otel-collector
                          scrape_interval: 5s
                          static_configs:
                            - targets:
                                - 0.0.0.0:8888
        service:
            extensions:
                - zpages
            pipelines:
                logs:
                    exporters:
                        - otlphttp/openobserve
                    processors:
                        - batch
                        - k8sattributes
                    receivers:
                        - filelog/std
                metrics:
                    exporters:
                        - otlphttp/openobserve
                    processors:
                        - batch
                        - k8sattributes
                    receivers:
                        - kubeletstats
                traces:
                    exporters:
                        - otlphttp/openobserve
                    processors:
                        - batch
                        - k8sattributes
                    receivers:
                        - otlp
    env:
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
                fieldPath: spec.hostIP
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
                fieldPath: spec.nodeName
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.99.0
    ingress:
        route: {}
    managementState: managed
    mode: daemonset
    observability:
        metrics: {}
    podDisruptionBudget:
        maxUnavailable: 1
    replicas: 1
    resources: {}
    serviceAccount: openobserve-collector
    targetAllocator:
        allocationStrategy: consistent-hashing
        filterStrategy: relabel-config
        observability:
            metrics: {}
        prometheusCR:
            podMonitorSelector: {}
            scrapeInterval: 30s
            serviceMonitorSelector: {}
        resources: {}
    tolerations:
        - effect: NoSchedule
          key: exampleKey1
          operator: Equal
          value: "true"
    upgradeStrategy: automatic
    volumeMounts:
        - mountPath: /hostfs
          name: hostfs
        - mountPath: /var/log
          name: varlog
        - mountPath: /var/lib/docker/containers
          name: varlibdockercontainers
          readOnly: true
    volumes:
        - hostPath:
            path: /
          name: hostfs
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /var/lib/docker/containers
            type: ""
          name: varlibdockercontainers
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age10v5jyc5ylreyltm32kfj57fmqle0aumxqvg9lp67r50cl8ynlsmq9kx7ez
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBtd3l3Z3FIbHRETlRXc1pV
            M1J0RGlsYzZ1SXE2WmtCOGZlQWgzYUNHa3dFClJKQVVqejB2VGMrS1gxNTVuaTcv
            aG1lWFU1b1FpR3JVVVVGajlkVjlwblkKLS0tIG5KaDRrOExuanpOR3N5aWkzNk8x
            ZWRZN2YxVThNbkplUm9OKzg2bU9wQTgKairlRP9oc4T5BTreZzuDKMbqHYfmBB8/
            EZWIvj03++KX2Dqn7BoI2W0a8zIuov6irNnEmiwSMyiMlWgsHanVDA==
            -----END AGE ENCRYPTED FILE-----
        - recipient: age1c8rjkuv9px2gfyrlqn75ajhv26l8fdmeugcdegt237c20l8uc4wq6y9h6d
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSA5RlpGWmJpYlFNaXQ0cTlR
            N1U3eUtaV1ZqeUxhM3djbENQMGJ0TVpnaVZJCjRPdnAxcXc5cXB0Rk1PSGtORDR2
            bU9saGwvSWVpSVZkbkZPelh3dmZKR0EKLS0tIGRyTjBVWlZSaTZQcGdwRktvSFZa
            KzA4eXRLd2ZKYjY5UlkwSmhTSEpNMlkKxsEKHYlsmbgZUTmf5s5dHYP9IukWU/Cb
            rQ8IgNb3SX4DjkP1KPf+EIq8uV2h5Pl4yrOS0EpMa+yTHyBqv7YZVg==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2024-05-14T10:26:38Z"
    mac: ENC[AES256_GCM,data:Zu338V/Qdg4ZvxXwBcv9BwK0dY4rdk4vpSvyp6V3c4YChY4tIv7UUstcogLrs5cJD+RrH0VG4XJuCbP7tUXFl0PdeuQJSeOtxzkM/Wy4zNWpOO2denOnVWrSt/eBOEdlprDc3dTVh/rhHE+fx+VtW/iQIJuydqXwoKY9i8Ci690=,iv:RJLo1mwZpCGq2giQmadb0W+8PYRSbxleo1z0QK691ko=,tag:h9vz5fdTKB9JRChbMLmhjQ==,type:str]
    pgp: []
    encrypted_regex: ^(data|stringData|Authorization)$
    version: 3.8.1
